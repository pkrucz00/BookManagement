/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.bookmanagement.bookManagement.api;

import io.swagger.annotations.*;
import org.bookmanagement.bookManagement.model.Book;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-28T16:07:06.265978700+02:00[Europe/Belgrade]")
@Validated
@Api(value = "book", description = "the book API")
public interface BookApi {

    default BookApiDelegate getDelegate() {
        return new BookApiDelegate() {};
    }

    /**
     * POST /book : Add a new book to the library
     *
     * @param book Book that needs to be added to the library (required)
     * @return object successfully created (status code 201)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add a new book to the library", nickname = "addBook", notes = "", response = Book.class, tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "object successfully created", response = Book.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PostMapping(
        value = "/book",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> addBook(@ApiParam(value = "Book that needs to be added to the library" ,required=true )  @Valid @RequestBody Book book) {
        return getDelegate().addBook(book);
    }


    /**
     * DELETE /book/{bookId} : Deletes a given book
     *
     * @param bookId ID of the book to be deleted (required)
     * @return Book successfully deleted (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Book not found (status code 404)
     */
    @ApiOperation(value = "Deletes a given book", nickname = "deleteBook", notes = "", tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Book successfully deleted"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Book not found") })
    @DeleteMapping(
        value = "/book/{bookId}"
    )
    default ResponseEntity<Void> deleteBook(@ApiParam(value = "ID of the book to be deleted",required=true) @PathVariable("bookId") Long bookId) {
        return getDelegate().deleteBook(bookId);
    }


    /**
     * GET /book/{bookId} : Gets info about the given book
     *
     * @param bookId ID of the book to return (required)
     * @return succesful operation (status code 200)
     *         or Invelid ID supplied (status code 400)
     *         or Book not found (status code 404)
     */
    @ApiOperation(value = "Gets info about the given book", nickname = "getBookById", notes = "", response = Book.class, tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succesful operation", response = Book.class),
        @ApiResponse(code = 400, message = "Invelid ID supplied"),
        @ApiResponse(code = 404, message = "Book not found") })
    @GetMapping(
        value = "/book/{bookId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Book> getBookById(@ApiParam(value = "ID of the book to return",required=true) @PathVariable("bookId") Long bookId) {
        return getDelegate().getBookById(bookId);
    }


    /**
     * GET /book : Get list of all books in library
     *
     * @return successful operation (status code 200)
     *         or List not found (status code 404)
     */
    @ApiOperation(value = "Get list of all books in library", nickname = "getBooksList", notes = "", response = Book.class, responseContainer = "List", tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "List not found") })
    @GetMapping(
        value = "/book",
        produces = { "aplication/json" }
    )
    default ResponseEntity<List<Book>> getBooksList() {
        return getDelegate().getBooksList();
    }


    /**
     * PUT /book : Update an existing book
     *
     * @param book Book that needs to be added to the library (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Book not found (status code 404)
     */
    @ApiOperation(value = "Update an existing book", nickname = "updateBook", notes = "", response = Book.class, tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Book.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Book not found") })
    @PutMapping(
        value = "/book",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> updateBook(@ApiParam(value = "Book that needs to be added to the library" ,required=true )  @Valid @RequestBody Book book) {
        return getDelegate().updateBook(book);
    }

}
